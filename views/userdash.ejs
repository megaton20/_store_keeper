<%- include ('./partials/messages') %>
<div class="p-4 mt-4">
  <div class="row">
    <!-- cat Card-->
    <div class="col-3 ">

      <div class="card bg-transparent border-2 rounded-4 mb-2">
        <div class="card-header text-light bg-transparent">Categories</div>
        <div class="card-body">

          <div class="row mb-4">
            <% allCategory.forEach(data=> { %>
              <button data-category="<%= data.Category_name %>"
                class=" categoryButton  tile mb-4 col-6 card bg-transparent shadow border-1  bg-light  text-light  p-4 h-100">
                <%= data.Category_name %>
              </button>
              <% }); %>
          </div>

        </div>
      </div>

    </div>


    <!-- items Card-->

    <div class="col-6">
      <section >
        <div class="card bg-transparent shadow border-2 rounded-4 mb-3">
          <div class="card-header bg-transparent">
            <div class="row">
              <div class="col-md-6 " id="itemHeading">Items </div>
              <div class="search-bar col-md-6 ">
                <input style="padding: 2px; padding-left: 5px;" type="text" placeholder="search items"
                  class="form-control bg-transparent text-light" />
              </div>
            </div>
          </div>
          <div class="card-body " style="height: 600px; overflow-y: scroll; ">

            <div class="mb-2 row" id="itemsContainer">



            </div>
          </div>
        </div>
      </section>
    </div>

    <!-- cart Card-->
    <div class="col-3">

      <div class="card text-light bg-transparent border-2 shadow rounded-4 mb-4">
        <div class="card-header bg-transparent"> Total: <span id="Total" class="text-success"> 0 </span>  NAIRA</div>
        <div class="card-body p-4">
          <div class="mb-2">

            <!-- to display cart items -->
            <div id="cart" >
            
            </div>


         
            </div>

          <br />
          <!-- <p>Added Discount: <span id="">- 0</span>Naira</p> -->
          
          <form id="cart-form"  action="/user/cart"  method="post">
            <!-- Form for submitting the cart -->

          
  
              <select  id="payment-method" class="form-control bg-transparent text-light">

                <option value="Cash">Cash</option>
                <option value="Debit Card">Debit Card</option>
                <option value="Split Payment">Split Payment</option>
              </select>

           
  
            <button class="btn btn-success mt-3" type="submit"   id="submit-cart" style="width: 100%" > submit</button>
          </form>


           
          <div class="img mt-3 mb-4">
            <img style="width: 100%" src="/assets/payments.png" alt="" />
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

<div class="my-footer " style="position: fixed; bottom: 0; width: 100%;">
  
  <%- include('./partials/footer') %>
</div>


<script>
  // Array to store items in the cart
  let cart = [];
  let priceArray = []
  let submitPrice
 
  var  totalDiv = document.getElementById('Total')

// calculating the  price in the current array
function populateCurrentPrice(){


    var totalPrice = priceArray.reduce((total,item)=> total + parseInt(item.price), 0)
    
    totalDiv.innerHTML = totalPrice.toLocaleString('en-Us')

    submitPrice = totalPrice

return

}




  // // Function to add item to cart
  function addToCart(itemId) {
    // Push the item into the cart array
    cart.push(itemId);
    // Update the cart display
    displayCart();
    
  }

  // // Function to remove item from cart
  function removeFromCart(itemId) {

    uuidToRemove = itemId.uuid
    

    var indexToRemove = cart.findIndex(purgeItem => purgeItem.uuid === uuidToRemove);

    if (indexToRemove !== -1) {
      cart.splice(indexToRemove,1)
    }

    // Update the cart display
    removePrice(itemId)
    displayCart();
  }

  function handleBbuttonClick(event){

    // get id from the button
    let selectedButton = document.querySelectorAll(".add-to-cart")
    var id = event.getAttribute("data-id")
    var name = event.getAttribute("data-name")
    var price = event.getAttribute("data-price")
    
    let obj = { id:id, name:name, price:price}

    var uuid = Date.now()+Math.floor(Math.random()*1000)

    obj.uuid  = uuid

    // return 
    // add object 
    addToCart(obj)
  // update the  price too
    addPrice( obj)


    
  }

  // add price to array  func
  function addPrice(cartObj){

    priceArray.push(cartObj)
    populateCurrentPrice()

  }

  // remove price  from array func
  function removePrice(itemId){

    uuidToRemove  =  itemId.uuid
    var indexToRemove = priceArray.findIndex(purgeItem => purgeItem.uuid === uuidToRemove);
    
    if (indexToRemove !== -1) {
      priceArray.splice(indexToRemove,1)
    }

 }




  // Function to display cart items
  function displayCart() {

    const cartDiv = document.getElementById('cart');
    const actionDiv = document.getElementById('action');
    //   // Clear the cart display
    cartDiv.innerHTML = '';
  //   // Iterate over the cart array and display each item
    cart.forEach((itemId, index) => {
      // Here you can fetch item details from your data source using itemId
      
      const itemName = ` ${itemId.name}`;
      const itemPrice = ` ${itemId.price}`;
      // Create a div to display item details
      const itemDiv = document.createElement('div');
      itemDiv.classList.add("mb-4","row", "border-bottom", 'pb-1')
      // Create a button to remove the item
      const itmeContent = document.createElement('div');
      itmeContent.classList.add( "col-6")
      itmeContent.textContent =  `${itemName} `;
      

      // Create a price div
      const selectedPrice = document.createElement('div');
      selectedPrice.classList.add( "col-3", )
      selectedPrice.textContent =  `${itemPrice} `;

      const removeButton = document.createElement('button');
      
      removeButton.textContent = 'Remove';
      removeButton.classList.add("btn", "btn-danger", "col-3")
      removeButton.addEventListener('click', () => {
        // Call removeFromCart function passing index
        removeFromCart(itemId);
        //  call remove price  function too
        removePrice(itemId)
        populateCurrentPrice()

        
      });
      // Append item details and remove button to cart div
      cartDiv.appendChild(itemDiv);
      itemDiv.appendChild(itmeContent);
      itemDiv.appendChild(selectedPrice);
      itemDiv.appendChild(removeButton);
    });
  }


// Function to submit the cart as a form
  function submitCart(e) {


    const paymentInput = document.getElementById('payment-method').value
    let customerName = {
      sumTotal: submitPrice,
      paymentType: paymentInput
    }

    const paymentMethodInput = document.getElementById('payment-method')
    const myform = document.getElementById('cart-form')


    // e.preventDefault(); // Prevent the default form submission behavior
    // Add cart data to the form
    const metaDataInput = document.createElement('input')
    metaDataInput.setAttribute('type', "hidden");
    metaDataInput.setAttribute('name', 'meta')
    metaDataInput.setAttribute('value', JSON.stringify(customerName))



    const cartInput = document.createElement('input');
    cartInput.setAttribute('type', 'hidden');
    cartInput.setAttribute('name', 'cart');
    cartInput.setAttribute('value', JSON.stringify(cart));

    
    const formData = document.getElementById('cart-form').appendChild(cartInput);
    document.getElementById('cart-form').appendChild(metaDataInput)
    
    console.log(formData);



    // Submit the form
    const form = document.getElementById('cart-form');
    // const formData = new FormData(form);

}

let form = document.getElementById('submit-cart')
  form.addEventListener('click', submitCart);

  const itemHeading = document.getElementById('itemHeading')
  // Add event listener to category buttons
  const categoryButtons = document.querySelectorAll('.categoryButton');
  categoryButtons.forEach(button => {
    button.addEventListener('click', function () {
      const category = this.getAttribute('data-category');

      fetch(`/getItems/${category}`) // Adjust the route according to your server setup
        .then(response => response.json())
        .then(items => {
          populateItems(items);
        })
        .catch(error => {
          console.error('Error fetching items:', error);
        });
    });
  });

  // Function to populate items in the itemsContainer
  function populateItems(items) {
    const itemsContainer = document.getElementById('itemsContainer');
    itemsContainer.innerHTML = ''; // Clear existing items
    if (items.length === 0) {
      // Display message when no items are found
      itemsContainer.innerHTML = '<p class="p-4 text-light "> No items found for this category at the  moment (-:)</p>';
      itemHeading.classList.remove("text-light")
      itemHeading.classList.add("text-danger")
      itemHeading.innerHTML = `no item in this category  yet`
    } else {
      items.forEach(item => {
        itemHeading.classList.remove("text-dark")
        itemHeading.classList.add("text-light")
        itemHeading.innerHTML = `This are all the items from "${item.category}"`
        const itemElement = document.createElement('div');
        itemElement.innerHTML = `
          <button class="add-to-cart tile card bg-transparent text-light text-center mb-4 mr-2" data-id="${item.id}" data-name="${item.ProductName}" data-price = '${item.UnitPrice}' onclick=" handleBbuttonClick(this)">
            <a>
              <img style="max-width: 120px; max-height: 120px;" src="/images/default.JPG" class="card-img-top rounded-4" alt="...">
              <div class="card-body text-center">
                <p class="card-text">${item.ProductName}</p>
                <p class="card-text"><small>$ ${item.UnitPrice}</small></p>
              </div>
            </a>
          </button>
        `;
        itemsContainer.appendChild(itemElement);
      });
    }
  }



</script>